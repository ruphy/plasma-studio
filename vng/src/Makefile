#############################################################################
# Makefile for building: ../vng
# Generated by qmake (2.01a) (Qt 4.5.0) on: Thu Jan 22 20:40:30 2009
# Project:  src.pro
# Template: app
# Command: /usr/bin/qmake -unix -o Makefile src.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -march=i686 -mtune=generic -O2 -pipe -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -march=i686 -mtune=generic -O2 -pipe -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt/mkspecs/linux-g++ -I. -I/usr/include/QtCore -I/usr/include/QtGui -I/usr/include -Ihunks -Ipatches -Icommands -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1 -Wl,-rpath,/usr/lib
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -L/usr/lib -L/usr/X11R6/lib -pthread -lpng -lfreetype -lgobject-2.0 -lSM -lICE -pthread -pthread -lXrender -lXinerama -lfontconfig -lXext -lX11 -lQtCore -lz -lm -pthread -lgthread-2.0 -lrt -lglib-2.0 -ldl -lpthread
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = Vng.cpp \
		CommandLineParser.cpp \
		AbstractCommand.cpp \
		ExcludeMatcher.cpp \
		GitRunner.cpp \
		Logger.cpp \
		Interview.cpp \
		InterviewCursor.cpp \
		Configuration.cpp \
		VngCommandLine.cpp \
		commands/Add.cpp \
		commands/AmendRecord.cpp \
		commands/Branches.cpp \
		commands/Changes.cpp \
		commands/Dist.cpp \
		commands/Initialize.cpp \
		commands/Move.cpp \
		commands/Push.cpp \
		commands/Record.cpp \
		commands/Remove.cpp \
		commands/Revert.cpp \
		commands/UnRecord.cpp \
		commands/UnRevert.cpp \
		commands/WhatsNew.cpp \
		hunks/Hunk.cpp \
		hunks/File.cpp \
		hunks/ChangeSet.cpp \
		hunks/HunksCursor.cpp \
		patches/Commit.cpp \
		patches/Branch.cpp \
		patches/CommitsCursor.cpp \
		patches/CommitsMatcher.cpp moc_Logger_p.cpp
OBJECTS       = Vng.o \
		CommandLineParser.o \
		AbstractCommand.o \
		ExcludeMatcher.o \
		GitRunner.o \
		Logger.o \
		Interview.o \
		InterviewCursor.o \
		Configuration.o \
		VngCommandLine.o \
		Add.o \
		AmendRecord.o \
		Branches.o \
		Changes.o \
		Dist.o \
		Initialize.o \
		Move.o \
		Push.o \
		Record.o \
		Remove.o \
		Revert.o \
		UnRecord.o \
		UnRevert.o \
		WhatsNew.o \
		Hunk.o \
		File.o \
		ChangeSet.o \
		HunksCursor.o \
		Commit.o \
		Branch.o \
		CommitsCursor.o \
		CommitsMatcher.o \
		moc_Logger_p.o
DIST          = /usr/share/qt/mkspecs/common/g++.conf \
		/usr/share/qt/mkspecs/common/unix.conf \
		/usr/share/qt/mkspecs/common/linux.conf \
		/usr/share/qt/mkspecs/qconfig.pri \
		/usr/share/qt/mkspecs/features/qt_functions.prf \
		/usr/share/qt/mkspecs/features/qt_config.prf \
		/usr/share/qt/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt/mkspecs/features/default_pre.prf \
		/usr/share/qt/mkspecs/features/release.prf \
		/usr/share/qt/mkspecs/features/default_post.prf \
		/usr/share/qt/mkspecs/features/warn_on.prf \
		/usr/share/qt/mkspecs/features/qt.prf \
		/usr/share/qt/mkspecs/features/unix/thread.prf \
		/usr/share/qt/mkspecs/features/moc.prf \
		/usr/share/qt/mkspecs/features/resources.prf \
		/usr/share/qt/mkspecs/features/uic.prf \
		/usr/share/qt/mkspecs/features/yacc.prf \
		/usr/share/qt/mkspecs/features/lex.prf \
		src.pro
QMAKE_TARGET  = vng
DESTDIR       = ../
TARGET        = ../vng

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	@$(CHK_DIR_EXISTS) ../ || $(MKDIR) ../ 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: src.pro  /usr/share/qt/mkspecs/linux-g++/qmake.conf /usr/share/qt/mkspecs/common/g++.conf \
		/usr/share/qt/mkspecs/common/unix.conf \
		/usr/share/qt/mkspecs/common/linux.conf \
		/usr/share/qt/mkspecs/qconfig.pri \
		/usr/share/qt/mkspecs/features/qt_functions.prf \
		/usr/share/qt/mkspecs/features/qt_config.prf \
		/usr/share/qt/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt/mkspecs/features/default_pre.prf \
		/usr/share/qt/mkspecs/features/release.prf \
		/usr/share/qt/mkspecs/features/default_post.prf \
		/usr/share/qt/mkspecs/features/warn_on.prf \
		/usr/share/qt/mkspecs/features/qt.prf \
		/usr/share/qt/mkspecs/features/unix/thread.prf \
		/usr/share/qt/mkspecs/features/moc.prf \
		/usr/share/qt/mkspecs/features/resources.prf \
		/usr/share/qt/mkspecs/features/uic.prf \
		/usr/share/qt/mkspecs/features/yacc.prf \
		/usr/share/qt/mkspecs/features/lex.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -unix -o Makefile src.pro
/usr/share/qt/mkspecs/common/g++.conf:
/usr/share/qt/mkspecs/common/unix.conf:
/usr/share/qt/mkspecs/common/linux.conf:
/usr/share/qt/mkspecs/qconfig.pri:
/usr/share/qt/mkspecs/features/qt_functions.prf:
/usr/share/qt/mkspecs/features/qt_config.prf:
/usr/share/qt/mkspecs/features/exclusive_builds.prf:
/usr/share/qt/mkspecs/features/default_pre.prf:
/usr/share/qt/mkspecs/features/release.prf:
/usr/share/qt/mkspecs/features/default_post.prf:
/usr/share/qt/mkspecs/features/warn_on.prf:
/usr/share/qt/mkspecs/features/qt.prf:
/usr/share/qt/mkspecs/features/unix/thread.prf:
/usr/share/qt/mkspecs/features/moc.prf:
/usr/share/qt/mkspecs/features/resources.prf:
/usr/share/qt/mkspecs/features/uic.prf:
/usr/share/qt/mkspecs/features/yacc.prf:
/usr/share/qt/mkspecs/features/lex.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -unix -o Makefile src.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/vng1.0.0 || $(MKDIR) .tmp/vng1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/vng1.0.0/ && $(COPY_FILE) --parents Vng.h CommandLineParser.h AbstractCommand.h ExcludeMatcher.h GitRunner.h Logger_p.h Logger.h Interview.h InterviewCursor.h Configuration.h VngCommandLine.h commands/Add.h commands/AmendRecord.h commands/Branches.h commands/Changes.h commands/Dist.h commands/Initialize.h commands/Move.h commands/Push.h commands/Record.h commands/Remove.h commands/Revert.h commands/UnRecord.h commands/UnRevert.h commands/WhatsNew.h hunks/Hunk.h hunks/File.h hunks/ChangeSet.h hunks/HunksCursor.h patches/Commit.h patches/Commit_p.h patches/Branch.cpp patches/CommitsCursor.h patches/CommitsMatcher.h .tmp/vng1.0.0/ && $(COPY_FILE) --parents Vng.cpp CommandLineParser.cpp AbstractCommand.cpp ExcludeMatcher.cpp GitRunner.cpp Logger.cpp Interview.cpp InterviewCursor.cpp Configuration.cpp VngCommandLine.cpp commands/Add.cpp commands/AmendRecord.cpp commands/Branches.cpp commands/Changes.cpp commands/Dist.cpp commands/Initialize.cpp commands/Move.cpp commands/Push.cpp commands/Record.cpp commands/Remove.cpp commands/Revert.cpp commands/UnRecord.cpp commands/UnRevert.cpp commands/WhatsNew.cpp hunks/Hunk.cpp hunks/File.cpp hunks/ChangeSet.cpp hunks/HunksCursor.cpp patches/Commit.cpp patches/Branch.cpp patches/CommitsCursor.cpp patches/CommitsMatcher.cpp .tmp/vng1.0.0/ && (cd `dirname .tmp/vng1.0.0` && $(TAR) vng1.0.0.tar vng1.0.0 && $(COMPRESS) vng1.0.0.tar) && $(MOVE) `dirname .tmp/vng1.0.0`/vng1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/vng1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_Logger_p.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_Logger_p.cpp
moc_Logger_p.cpp: Logger.h \
		Logger_p.h
	/usr/bin/moc $(DEFINES) $(INCPATH) Logger_p.h -o moc_Logger_p.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

Vng.o: Vng.cpp Vng.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Vng.o Vng.cpp

CommandLineParser.o: CommandLineParser.cpp CommandLineParser.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o CommandLineParser.o CommandLineParser.cpp

AbstractCommand.o: AbstractCommand.cpp AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o AbstractCommand.o AbstractCommand.cpp

ExcludeMatcher.o: ExcludeMatcher.cpp ExcludeMatcher.h \
		GitRunner.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ExcludeMatcher.o ExcludeMatcher.cpp

GitRunner.o: GitRunner.cpp GitRunner.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o GitRunner.o GitRunner.cpp

Logger.o: Logger.cpp Logger.h \
		Logger_p.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Logger.o Logger.cpp

Interview.o: Interview.cpp Interview.h \
		InterviewCursor.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Interview.o Interview.cpp

InterviewCursor.o: InterviewCursor.cpp InterviewCursor.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o InterviewCursor.o InterviewCursor.cpp

Configuration.o: Configuration.cpp Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		Logger.h \
		GitRunner.h \
		AbstractCommand.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Configuration.o Configuration.cpp

VngCommandLine.o: VngCommandLine.cpp VngCommandLine.h \
		CommandLineParser.h \
		Logger.h \
		commands/Add.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		ExcludeMatcher.h \
		commands/AmendRecord.h \
		commands/Branches.h \
		commands/Changes.h \
		commands/Dist.h \
		commands/Initialize.h \
		commands/Move.h \
		commands/Push.h \
		commands/Record.h \
		commands/Remove.h \
		commands/Revert.h \
		commands/UnRecord.h \
		commands/UnRevert.h \
		commands/WhatsNew.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o VngCommandLine.o VngCommandLine.cpp

Add.o: commands/Add.cpp commands/Add.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		ExcludeMatcher.h \
		CommandLineParser.h \
		Logger.h \
		GitRunner.h \
		hunks/File.h \
		hunks/Hunk.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Add.o commands/Add.cpp

AmendRecord.o: commands/AmendRecord.cpp commands/AmendRecord.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		commands/UnRecord.h \
		commands/Record.h \
		CommandLineParser.h \
		Logger.h \
		Interview.h \
		GitRunner.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o AmendRecord.o commands/AmendRecord.cpp

Branches.o: commands/Branches.cpp commands/Branches.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Branches.o commands/Branches.cpp

Changes.o: commands/Changes.cpp commands/Changes.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		GitRunner.h \
		Logger.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		patches/CommitsMatcher.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Changes.o commands/Changes.cpp

Dist.o: commands/Dist.cpp commands/Dist.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		Logger.h \
		GitRunner.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Dist.o commands/Dist.cpp

Initialize.o: commands/Initialize.cpp commands/Initialize.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		GitRunner.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Initialize.o commands/Initialize.cpp

Move.o: commands/Move.cpp commands/Move.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		Logger.h \
		GitRunner.h \
		hunks/File.h \
		hunks/Hunk.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Move.o commands/Move.cpp

Push.o: commands/Push.cpp commands/Push.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		Logger.h \
		GitRunner.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Push.o commands/Push.cpp

Record.o: commands/Record.cpp commands/Record.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		GitRunner.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		hunks/HunksCursor.h \
		InterviewCursor.h \
		Logger.h \
		Interview.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Record.o commands/Record.cpp

Remove.o: commands/Remove.cpp commands/Remove.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		GitRunner.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Remove.o commands/Remove.cpp

Revert.o: commands/Revert.cpp commands/Revert.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		Interview.h \
		Logger.h \
		GitRunner.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		hunks/HunksCursor.h \
		InterviewCursor.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Revert.o commands/Revert.cpp

UnRecord.o: commands/UnRecord.cpp commands/UnRecord.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		Interview.h \
		GitRunner.h \
		Logger.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		patches/CommitsCursor.h \
		InterviewCursor.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o UnRecord.o commands/UnRecord.cpp

UnRevert.o: commands/UnRevert.cpp commands/UnRevert.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h \
		commands/Revert.h \
		Interview.h \
		GitRunner.h \
		Logger.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		hunks/HunksCursor.h \
		InterviewCursor.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o UnRevert.o commands/UnRevert.cpp

WhatsNew.o: commands/WhatsNew.cpp commands/WhatsNew.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		ExcludeMatcher.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		Logger.h \
		GitRunner.h \
		CommandLineParser.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o WhatsNew.o commands/WhatsNew.cpp

Hunk.o: hunks/Hunk.cpp hunks/Hunk.h \
		Vng.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Hunk.o hunks/Hunk.cpp

File.o: hunks/File.cpp hunks/File.h \
		hunks/Hunk.h \
		Vng.h \
		hunks/ChangeSet.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		GitRunner.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o File.o hunks/File.cpp

ChangeSet.o: hunks/ChangeSet.cpp hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		Vng.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h \
		GitRunner.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ChangeSet.o hunks/ChangeSet.cpp

HunksCursor.o: hunks/HunksCursor.cpp hunks/HunksCursor.h \
		InterviewCursor.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		Vng.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		patches/Commit.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o HunksCursor.o hunks/HunksCursor.cpp

Commit.o: patches/Commit.cpp patches/Commit.h \
		Vng.h \
		patches/Commit_p.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		AbstractCommand.h \
		Configuration.h \
		patches/Branch.h \
		GitRunner.h \
		Logger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Commit.o patches/Commit.cpp

Branch.o: patches/Branch.cpp patches/Branch.h \
		patches/Commit.h \
		Vng.h \
		patches/Commit_p.h \
		hunks/ChangeSet.h \
		hunks/File.h \
		hunks/Hunk.h \
		AbstractCommand.h \
		Configuration.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Branch.o patches/Branch.cpp

CommitsCursor.o: patches/CommitsCursor.cpp patches/CommitsCursor.h \
		InterviewCursor.h \
		patches/Commit.h \
		Vng.h \
		patches/CommitsMatcher.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o CommitsCursor.o patches/CommitsCursor.cpp

CommitsMatcher.o: patches/CommitsMatcher.cpp patches/CommitsMatcher.h \
		patches/Commit.h \
		Vng.h \
		CommandLineParser.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o CommitsMatcher.o patches/CommitsMatcher.cpp

moc_Logger_p.o: moc_Logger_p.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Logger_p.o moc_Logger_p.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

